from django.shortcuts import render, get_object_or_404
from django.http import HttpResponse
#from django.json import 
from .models import Node, Edge, EdgeType, Graph
from django.views.decorators.csrf import csrf_exempt
import json
# Create your views here.

def emptyGraph(request):
    newGraph = Graph(graphName="autoGenerated Graph")
    newGraph.save()
    context = {"graphID": newGraph.id}
    return render(request, 'frontend/index.html', context)
    
def openGraph(request, graph_id):
    context = {"nodes": get_object_or_404(Graph, pk=graph_id).node_set.all(), "graphID": graph_id, "edges": get_object_or_404(Graph, pk=graph_id).edge_set.all(), "edgetypes": get_object_or_404(Graph, pk=graph_id).edgetype_set.all()}
    return render(request, 'frontend/index.html', context)

#API STUFF GOES BELOW HERE

#POST data to these endpoints
@csrf_exempt
def addNode(request, graph_id):
    try:
        newNode = Node(graph=get_object_or_404(Graph, pk=graph_id),name=request.POST['info'],data=request.POST['textdata'],x=request.POST['x'],y=request.POST['y'])
        newNode.save()
    except:
        return HttpResponse("Couldn't create node: " + json.dumps(request.POST))
    return HttpResponse(newNode.id)

@csrf_exempt
def addEdge(request, graph_id):
    #try:
    newEdge = Edge(graph=get_object_or_404(Graph, pk=graph_id),node1=get_object_or_404(Node, pk=request.POST['node1']),node2=get_object_or_404(Node, pk=request.POST['node2']))
    newEdge.save()
    #except:
    #    return HttpResponse("Couldn't create node: " + json.dumps(request.POST))
    return HttpResponse(newEdge.id)
    
@csrf_exempt
def editNode(request):
    try:
        oldNode = get_object_or_404(Node, pk=request.POST['id'])
        if request.POST['info']:
            oldNode.name=request.POST['info']
        if request.POST['textdata']:
            oldNode.data=request.POST['textdata']
        if request.POST['x']:
            oldNode.x=request.POST['x']
        if request.POST['y']:
            oldNode.y=request.POST['y']
        oldNode.save()
    except:
        return HttpResponse("Couldn't edit node: " + json.dumps(request.POST))
    return HttpResponse(oldNode.id)

#DB data getters
def pickGraph(request, graph_id):
    graph = get_object_or_404(Graph, pk=graph_id)
    retobj = {"EdgeTypes": [], "Edges": [], "Nodes": []}
    edgeTypes = graph.edgetype_set.all()
    for etype in edgeTypes:
        retobj["EdgeTypes"].append(etype.jsonify())

    edges = graph.edge_set.all()
    for edge in edges:
        retobj["Edges"].append(edge.jsonify())
        
    nodes = graph.node_set.all()
    for node in nodes:
        retobj["Nodes"].append(node.jsonify())
    return HttpResponse(json.dumps(retobj))
    
def getNodes(request):
    nodes = Node.objects.all()
    retnodes = []
    for node in nodes:
        retnodes.append(node.jsonify())
    return HttpResponse(json.dumps(retnodes))
    
def getEdges(request):
    edges = Edge.objects.all()
    retedges = []
    for edge in edges:
        retedges.append(edge.jsonify())
    return HttpResponse(json.dumps(retedges))
    
def getGraphs(request):
    retobj = {"EdgeTypes": [], "Edges": [], "Nodes": []}
    edgeTypes = EdgeType.objects.all()
    for etype in edgeTypes:
        retobj["EdgeTypes"].append(etype.jsonify())

    edges = Edge.objects.all()
    for edge in edges:
        retobj["Edges"].append(edge.jsonify())
        
    nodes = Node.objects.all()
    for node in nodes:
        retobj["Nodes"].append(node.jsonify())
    return HttpResponse(json.dumps(retobj))